HOW PROPOSALS ARE HANDLED?

  johnAddress = 0x001
  maryAddress = 0x002

  // How they start a blockchain marriage?
  John: proposalNew(maryAddress)     =>  (check: proposalRecords(maryAddress) == johnAddress ? marriageCreate(maryAddress) : proposalCreate(maryAddress))
  Mary: proposalNew(johnAddress)     =>  (check: proposalRecords(johnAddress) == maryAddress ? marriageCreate(johnAddress) : proposalCreate(johnAddress))

  // What are proposal records?
  mapping (address => address) public proposalRecords;

  function proposalCreate(address _address) public returns(bool) {
    proposalRecords[msg.sender] = _address;
    return true;
  }

  function marriageCreate(address _address) public returns(bool) {
    // Create an empty marriage object
    marriages.new()                                   => marId  (adds empty marriage to marriages array)

    // Populate it with data
    marriages.addPerson(marId, <person params>)       => true   (adds person to the people array)
    marriages.addPerson(marId, <person params>)       => true   (adds person to the people array)
    marriages.addAgreement(marId, <agreement params>) => true   (adds agreement to marriage)

    // Set complete
    marriages.setComplete(marId)                      => marId  (adds timestamp, sets marriage.complete = true, adds people's addresses to marriageRecords)
  }



HOW MARRIAGES ARE CREATED?

  marriages.new()                                   => marId  (adds empty marriage to marriages array)
  marriages.addPerson(marId, <person params>)       => true   (adds person to the people array)
  marriages.addPerson(marId, <person params>)       => true   (adds person to the people array)
  marriages.addAgreement(marId, <agreement params>) => true   (adds agreement to marriage)
  marriages.setComplete(marId)                      => true   (adds timestamp, sets marriage.complete = true, adds people's addresses to marriageRecords)


DATA STRUCTURE

  // Define person:
  struct Person {
    Address _address;
    String firstName;
    String middleName;
    String familyName;
    DateTime dateOfBirth;
    String placeOfBirth;
    Uint id
  }

  // Define marriage:
  struct Marriage {
    Person[] people;
    String agreement;
    DateTime timestamp;
    Bool complete
  }

  // How we store marriages?
  mapping (??? => Marriage) public marriages;

  // How we check if a person already married?
  // We make a relations table:

  mapping (Address => ???) public marriageRecords;


QUESTIONS

  Shall we store data on SWARM?
  — probably not. It looks like Swarm is for files.
  http://swarm-gateways.net/bzz:/theswarm.eth/#code-and-status
  http://swarm-guide.readthedocs.io/en/latest/
  http://swarm-guide.readthedocs.io/en/latest/simpleuser.html
